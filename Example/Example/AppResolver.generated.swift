//
//  Resolver.swift
//  Generated by dikitgen.
//

import UIKit
import DIKit
import Foundation

extension AppResolver {

    func resolveMultiplier(value: Int) -> Multiplier {
        return Multiplier(dependency: .init(value: value))
    }

    func resolveAppResolver() -> AppResolver {
        return provideResolver()
    }

    func resolveListViewController() -> ListViewController {
        let appResolver = resolveAppResolver()
        return ListViewController.makeInstance(dependency: .init(resolver: appResolver))
    }

    func resolveCounter() -> Counter {
        if let sharedInstance = sharedInstances["Counter"] as? Counter {
            return sharedInstance
        }
        let sharedInstance = provideCounter().instance
        sharedInstances["Counter"] = sharedInstance
        return sharedInstance
    }

    func resolveDetailViewController(value: Int) -> DetailViewController {
        let multiplier = resolveMultiplier(value: value)
        let counter = resolveCounter()
        return DetailViewController.makeInstance(dependency: .init(multiplier: multiplier, counter: counter))
    }

}

